<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nack0c&#39;s home</title>
  
  <subtitle>ChenQing Hou</subtitle>
  <link href="https://nack0c.github.io/atom.xml" rel="self"/>
  
  <link href="https://nack0c.github.io/"/>
  <updated>2023-05-17T03:58:37.910Z</updated>
  <id>https://nack0c.github.io/</id>
  
  <author>
    <name>Nack0c</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>反射篇-1</title>
    <link href="https://nack0c.github.io/year/05/17/Java-%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84%E7%AF%87/%E5%8F%8D%E5%B0%84%E7%AF%87(1)/%E5%8F%8D%E5%B0%84%E7%AF%87(1)/"/>
    <id>https://nack0c.github.io/year/05/17/Java-%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84%E7%AF%87/%E5%8F%8D%E5%B0%84%E7%AF%87(1)/%E5%8F%8D%E5%B0%84%E7%AF%87(1)/</id>
    <published>2023-05-17T02:22:18.000Z</published>
    <updated>2023-05-17T03:58:37.910Z</updated>
    
    <content type="html"><![CDATA[<p>:::info<br>   Java安全可以从反序列化漏洞开始说起，反序列化漏洞⼜可以从反射开始说起。 反射是⼤多数语⾔⾥都必不可少的组成部分，对象可以通过反射获取他的类，类可以通过反射拿到所有 ⽅法（包括私有），拿到的⽅法可以调⽤，总之通过“反射”，我们可以将Java这种静态语⾔附加上动态特性。<br>:::<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">    classzz.getMethod(methodName).invoke(class.newInstance());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面的例子中，演示了几个反射中很重要的方法：</p><blockquote><ul><li>获取类的方法：forName</li><li>实例化类对象的方法：newInstance</li><li>获取函数的方法：getMethod</li><li>执行函数的方法：invoke</li></ul></blockquote><p>forName 不是获取“类”的唯一途径，通常来说我们有如下三种方式获取一个“类”，也就是 java.lang.Class 对象：<br>:::success</p><ul><li>obj.getClass()    <ul><li>如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过  obj.getClass()    来获取它的类。</li></ul></li><li>Test.class<ul><li>如果你已经加载了某个类，只是想获取到它的 java.lang.Class 对象，那么就直接拿它的 class 属性即可。这个⽅法其实不属于反射。  </li></ul></li><li>Class.forName()<ul><li>如果你知道某个类的名字，想获取到这个类，就可以使⽤ forName 来获取  。<br>:::</li></ul></li></ul><p>关于 forName<br>forName 有两个函数重载</p><ul><li>Class&lt;?&gt; forName(String name)</li><li>Class&lt;?&gt; forName(String name, <strong>boolean</strong> initialize, ClassLoader loader )<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(className)</span><br><span class="line">// 等于</span><br><span class="line">Class.forName(className,true,currentLoader)</span><br></pre></td></tr></table></figure>默认情况下， forName 的第一个参数是类名；第二个参数标识是否初始化；第三个参数就是 ClassLoader.<br>:::tips<br>ClassLoader<br>“加载器”，告诉Java虚拟机如何加载这个类。<br>:::</li></ul><p>关于 initialize = true.<br>:::info<br>可以理解为类的初始化。下面举一个例子。<br>:::<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Empty block initial %s\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Static initial %s\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Initial %s\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们举这个例子的目的在于查看 代码块{}、构造函数、static{} 三者的执行顺序。<br><img src="./image-1.png" alt="image.png"><br>那么，假设我们有下面这段函数，其中参数 <strong>name </strong>可控。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TouchFile</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        String[] commands = &#123;<span class="string">&quot;calc&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//        String[] commands = &#123;&quot;touch&quot;,&quot;/tmp/success&quot;&#125;;</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(commands);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ref</span><span class="params">(String name)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://cdn.nlark.com/yuque/0/2022/png/1425637/1670422094618-a270260b-be63-4f0a-bc66-935c7c46fd66.png#averageHue=%23d3e1ea&amp;clientId=u9c33f741-2115-4&amp;from=paste&amp;height=294&amp;id=u09957fe3&amp;originHeight=813&amp;originWidth=1258&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=97745&amp;status=done&amp;style=none&amp;taskId=u996a3d7b-fe12-4af7-a415-73b13ea5a29&amp;title=&amp;width=455.6000061035156" alt="image.png"> </p>]]></content>
    
    
    <summary type="html">Java反射学习之路~</summary>
    
    
    
    <category term="Java基础知识" scheme="https://nack0c.github.io/categories/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>阳光不燥，微风正好</title>
    <link href="https://nack0c.github.io/year/05/15/%E7%94%9F%E6%B4%BB/%E9%98%B3%E8%B0%B7%E6%98%8E%E5%AA%9A/"/>
    <id>https://nack0c.github.io/year/05/15/%E7%94%9F%E6%B4%BB/%E9%98%B3%E8%B0%B7%E6%98%8E%E5%AA%9A/</id>
    <published>2023-05-15T09:22:18.000Z</published>
    <updated>2023-05-15T09:46:00.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="夏至"><a href="#夏至" class="headerlink" title="夏至"></a>夏至</h1><blockquote><p>一生的时间很短<br> 短到不过是两颗心之间的距离</p></blockquote><div class="tip "><p>default</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;夏至&quot;&gt;&lt;a href=&quot;#夏至&quot; class=&quot;headerlink&quot; title=&quot;夏至&quot;&gt;&lt;/a&gt;夏至&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一生的时间很短&lt;br&gt; 短到不过是两颗心之间的距离&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;t</summary>
      
    
    
    
    
    <category term="生活" scheme="https://nack0c.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
