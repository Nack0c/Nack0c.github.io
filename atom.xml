<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nack0c&#39;s home</title>
  
  <subtitle>ChenQing Hou</subtitle>
  <link href="https://nack0c.github.io/atom.xml" rel="self"/>
  
  <link href="https://nack0c.github.io/"/>
  <updated>2023-05-17T16:28:25.016Z</updated>
  <id>https://nack0c.github.io/</id>
  
  <author>
    <name>Nack0c</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>反射篇-3</title>
    <link href="https://nack0c.github.io/year/05/17/Java-%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84%E7%AF%87/%E5%8F%8D%E5%B0%84%E7%AF%87(3)/%E5%8F%8D%E5%B0%84%E7%AF%87(3)/"/>
    <id>https://nack0c.github.io/year/05/17/Java-%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84%E7%AF%87/%E5%8F%8D%E5%B0%84%E7%AF%87(3)/%E5%8F%8D%E5%B0%84%E7%AF%87(3)/</id>
    <published>2023-05-17T12:40:45.000Z</published>
    <updated>2023-05-17T16:28:25.016Z</updated>
    
    <content type="html"><![CDATA[<p>  延续上次简单的命令执行 payload ，遗留下来两个问题：</p><ul><li>如果一个类没有无参构造方法，也没有类似于单例模式里的静态方法，我们怎么通关反射实例化该类呢？</li><li>如果一个方法或构造方法是私有方法，我们是否能执行它？</li></ul><div class="note success simple"><p>第一个问题，我们需要用到一个新的反射方法 getConstructor 。<br>和 getMethod 类似，getConstructor 接收的参数是构造函数列表类型，因为构造函数也支持重载，所以必须用参数列表类型才能唯一确定一个构造函数。<br>获取构造函数后，我们使用 newInstance 来执行。</p></div><p>Java 重载：方法重载指同一个类中定义的多个方法之间的关系,满足下列条件的多个方法相互构成重载: 多个方法在同一个类中 多个方法具有相同的方法名 多个方法的参数不相同,类型不同或者数量不同。</p><div class="note info simple"><p>比如，我们常用的另一种执行命令的方式 PorcessBuilder ，我们使用反射来获取其构造函数，然后调用 start() 来执行命令。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">        ((ProcessBuilder)clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc&quot;</span>))).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到 ProcessBuilder 有两个构造函数：</p><ul><li>public ProcessBuilder(List<String> command)</li><li>public ProcessBuilder(String… command)</li></ul><p><img src="https://i.328888.xyz/2023/05/17/VVktMV.png" alt="image.png"><br>上面用到了第一个形式的构造函数，所以我们在 getConstructor 传入的是 List.class 。<br>但是我们看到，前面的 payload 用到了强制类型转换，有时候我们利用漏洞的时候是没有这种语法的，所以我们仍需利用反射完成这一步。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line"><span class="comment">//        ((ProcessBuilder)clazz.getConstructor(List.class).newInstance(Arrays.asList(&quot;calc&quot;))).start();</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">calc</span> <span class="operator">=</span> clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc&quot;</span>));</span><br><span class="line">        clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(calc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 通过 getMethod(“start”) 获取到 start 方法，然后 invoke 执行， invoke 的第一个参数就是 ProcessBuilder Object 了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">        ((ProcessBuilder)clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc&quot;</span>&#125;&#125;)).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>那么我们如果要使用 public ProcessBuilder(String… command) 这个构造函数，需要怎样用反射执行呢？<br>这又涉及到 Java 里的可变长参数（varargs）了。正如其他语言一样，Java也支持可变长参数，就是当你定义函数的时候不确定参数数量的时候，可以使用 … 这样的语言来表示 ”这个函数的参数个数是可变的“。<br>对于可变长参数，Java其实在编译的时候会编译成一个数组，也就是说，下面两种写法在底层是等价的（也就不能重载）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span> <span class="params">(String[] names)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span> <span class="params">(String... names)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><br>也由此，如果我们有一个数组，想传给 hello 函数，只需<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String names[] = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line">hello(names);</span><br></pre></td></tr></table></figure></p><p>那么对于反射来说，如果要获取的布标函数里包含可变长参数，我们认为它是数组就行了。<br>所以我们将字符串数组类 String[].class 传给 getContructor ，获取 ProcessBuilder 的第二种构造函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">class.getConstrctor(<span class="string">&quot;String[].class&quot;</span>);</span><br></pre></td></tr></table></figure><br>在调用 newInstance 的时候，因为这个函数本身接受的是一个可变长参数，我们传给 ProcessBuilder 的也是一个可变长参数，二者叠加为一个二维数组，payload 如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder)clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc&quot;</span>&#125;&#125;)).start();</span><br></pre></td></tr></table></figure><br>反射编写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> </span><br><span class="line">    clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc&quot;</span>&#125;&#125;);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(instance);</span><br></pre></td></tr></table></figure></p><p>继续说上面提到的第二个问题，如果一个方法或构造方法是私有方法，我们是否能执行它呢？<br>这就涉及到 getDeclared 系列的反射了，与普通的 getMethod 、getConstructor 的区别是：</p><ul><li>getMethod 系列方法获取的是当前类中所有公共方法，包括父类继承的方法。</li><li>getDeclaredMethod 系列方法获取的就是当前类中的 ”声明“ 的方法，是实写在这个类里的，包括私有的方法，但从父类里继承来的就不包含了。</li></ul><p>举个例子，我们之前说过 Runtime 这个类的构造函数是私有的，我们需要用 Runtime.getRuntime() 来获取对象。其实现在我们也可以直接用  getDeclaredConstructor 来获取这个私有的构造方法来实例 化对象，进而执行命令.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(constructor.newInstance(),<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure><br> 可见，这里使用了一个方法 setAccessible ，这个是必须的。我们在获取到一个私有方法后，必须用 setAccessible 修改它的作用域，否则仍然不能调用。  </p>]]></content>
    
    
    <summary type="html">Java反射学习之路~</summary>
    
    
    
    
    <category term="Java基础知识" scheme="https://nack0c.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>反射篇-2</title>
    <link href="https://nack0c.github.io/year/05/17/Java-%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84%E7%AF%87/%E5%8F%8D%E5%B0%84%E7%AF%87(2)/%E5%8F%8D%E5%B0%84%E7%AF%87(2)/"/>
    <id>https://nack0c.github.io/year/05/17/Java-%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84%E7%AF%87/%E5%8F%8D%E5%B0%84%E7%AF%87(2)/%E5%8F%8D%E5%B0%84%E7%AF%87(2)/</id>
    <published>2023-05-17T11:10:17.000Z</published>
    <updated>2023-05-17T16:28:25.016Z</updated>
    
    <content type="html"><![CDATA[<div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>我们接着上一节，上次谈到了 forName.<br>  在正常情况下，除了系统类，如果我们想拿到一个类，需要先 import 才能使用。而使用forName就不需要，这样对于我们的攻击者来说就十分有利，我们可以加载任意类。<br>  获得类以后，我们可以继续使用反射来获取这个类中的属性、方法，也可以实例化这个类，并调用方法。  </p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p> class.newInstance() 的作用就是调用这个类的无参构造函数，这个比较好理解。不过，我们有时候 在写漏洞利用方法的时候，会发现使用 newInstance 总是不成功，这时候原因可能是：  </p><ul><li>你使用的类没有无参构造函数  </li><li>你使用的类构造函数是私有的  </li></ul><p>最最常见的就是 java.lang.Runtime  这个类在我们构造命令执行Payload的时候很常见，但我们不能直接这样来执行命令:</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">calc</span> <span class="operator">=</span> method.invoke(clazz.newInstance(), <span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/05/17/VVkioX.png" alt="image.png"><br><strong>原因就是 Runtime 是私有的！！！</strong></p><blockquote><p>  有同学就比较好奇，为什么会有类的构造方法是私有的，难道他不想让用户使用这个类吗？这其实涉及 到很常见的设计模式：“单例模式”。（有时候工厂模式也会写成类似） 比如，对于Web应用来说，数据库连接只需要建立一次，而不是每次用到数据库的时候再新建立一个连 接，此时作为开发者你就可以将数据库连接使用的类的构造函数设置为私有，然后编写一个静态方法来 获取。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainDB</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">TrainDB</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainDB</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TrainDB <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">TrainDB</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 建立连接的代码...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  这样，只有类初始化的时候会执行一次构造函数，后面只能通过 getInstance 获取这个对象，避免建 立多个数据库连接。<br>  回到正题，Runtime类就是单例模式，我们只能通过 Runtime.getRuntime() 来获取到 Runtime 对象。我们将上述Payload进行修改即可正常执行命令了</p></blockquote><p><img src="https://i.328888.xyz/2023/05/17/VVkyjJ.png" alt="image.png"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz),<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里用到了 getMethod 和 invoke 方法。</p><h4 id="getMethod"><a href="#getMethod" class="headerlink" title="getMethod"></a>getMethod</h4><p class="div-border top red">getMethod 的作用是通关反射获取一个类的某个特定的公有方法（public）。而学过Java的同学应该清楚，Java中 支持类的重载，我们不能仅通过函数名来确定一个函数。所以，在调用 getMethod 的时候，我们需要传给他你需要获取的函数的参数类型列表。  </p><p>比如：Runtime.getRuntime 有6个 exec 方法的重载，它们传入的参数个数、类型也是不同的。<br><img src="https://i.328888.xyz/2023/05/17/VVkAYA.png" alt="image.png"></p><h4 id="invoke"><a href="#invoke" class="headerlink" title="invoke"></a>invoke</h4><div class="note warning simple"><p>invoke 的作用是执行方法，它的第一个参数是：</p><ul><li>如果这个方法是一个普通方法，那么第一个参数是类对象；</li><li><p>如果这个方法是一个静态方法，那么第一个参数是类；</p><p>这也比较好理解了，我们正常执行方法是 [1].method([2], [3], [4]…) ，其实在反射里就是 method.invoke([1], [2], [3], [4]…) 。  </p></li></ul></div><p> 所以我们将上述命令执行的Payload分解一下就是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method1.invoke(clazz);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method2</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        method2.invoke(invoke,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        Method method = clazz.getMethod(&quot;exec&quot;, String.class);</span></span><br><span class="line"><span class="comment">//        method.invoke(clazz.getMethod(&quot;getRuntime&quot;).invoke(clazz),&quot;calc&quot;);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">Java反射学习之路~</summary>
    
    
    
    
    <category term="Java基础知识" scheme="https://nack0c.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>反射篇-1</title>
    <link href="https://nack0c.github.io/year/05/17/Java-%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84%E7%AF%87/%E5%8F%8D%E5%B0%84%E7%AF%87(1)/%E5%8F%8D%E5%B0%84%E7%AF%87(1)/"/>
    <id>https://nack0c.github.io/year/05/17/Java-%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84%E7%AF%87/%E5%8F%8D%E5%B0%84%E7%AF%87(1)/%E5%8F%8D%E5%B0%84%E7%AF%87(1)/</id>
    <published>2023-05-17T10:22:18.000Z</published>
    <updated>2023-05-17T16:28:25.016Z</updated>
    
    <content type="html"><![CDATA[<div class="note red icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>Java安全可以从反序列化漏洞开始说起，反序列化漏洞⼜可以从反射开始说起。 反射是⼤多数语⾔⾥都必不可少的组成部分，对象可以通过反射获取他的类，类可以通过反射拿到所有 ⽅法（包括私有），拿到的⽅法可以调⽤，总之通过“反射”，我们可以将Java这种静态语⾔附加上动态特性。 </p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">    classzz.getMethod(methodName).invoke(class.newInstance());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中，演示了几个反射中很重要的方法：</p><blockquote><ul><li>获取类的方法：forName</li><li>实例化类对象的方法：newInstance</li><li>获取函数的方法：getMethod</li><li>执行函数的方法：invoke</li></ul></blockquote><p>forName 不是获取“类”的唯一途径，通常来说我们有如下三种方式获取一个“类”，也就是 java.lang.Class 对象：<br><div class="note red icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><ul><li>obj.getClass()    <ul><li>如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过  obj.getClass()    来获取它的类。</li></ul></li><li>Test.class<ul><li>如果你已经加载了某个类，只是想获取到它的 java.lang.Class 对象，那么就直接拿它的 class 属性即可。这个⽅法其实不属于反射。  </li></ul></li><li>Class.forName()<ul><li>如果你知道某个类的名字，想获取到这个类，就可以使⽤ forName 来获取  。</li></ul></li></ul></div><br>关于 forName<br>forName 有两个函数重载</p><ul><li>Class&lt;?&gt; forName(String name)</li><li>Class&lt;?&gt; forName(String name, <strong>boolean</strong> initialize, ClassLoader loader )<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(className)</span><br><span class="line">// 等于</span><br><span class="line">Class.forName(className,true,currentLoader)</span><br></pre></td></tr></table></figure>默认情况下， forName 的第一个参数是类名；第二个参数标识是否初始化；第三个参数就是 ClassLoader.<div class="note info simple"><p>ClassLoader<br>  “加载器”，告诉Java虚拟机如何加载这个类。</p></div></li></ul><p>关于 initialize = true.<br><div class="note red icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>可以理解为类的初始化。下面举一个例子。</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Empty block initial %s\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Static initial %s\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Initial %s\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们举这个例子的目的在于查看 代码块{}、构造函数、static{} 三者的执行顺序。<br><img src="https://i.328888.xyz/2023/05/17/VVZ7xw.png" alt="image-1.png"><br>那么，假设我们有下面这段函数，其中参数 <strong>name </strong>可控。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TouchFile</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        String[] commands = &#123;<span class="string">&quot;calc&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//        String[] commands = &#123;&quot;touch&quot;,&quot;/tmp/success&quot;&#125;;</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(commands);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ref</span><span class="params">(String name)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://i.328888.xyz/2023/05/17/VVZLcF.png" alt="image-2.png"> </p>]]></content>
    
    
    <summary type="html">Java反射学习之路~</summary>
    
    
    
    
    <category term="Java基础知识" scheme="https://nack0c.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>阳光不燥，微风正好</title>
    <link href="https://nack0c.github.io/year/05/15/%E7%94%9F%E6%B4%BB/%E9%98%B3%E8%B0%B7%E6%98%8E%E5%AA%9A/"/>
    <id>https://nack0c.github.io/year/05/15/%E7%94%9F%E6%B4%BB/%E9%98%B3%E8%B0%B7%E6%98%8E%E5%AA%9A/</id>
    <published>2023-05-15T17:22:18.000Z</published>
    <updated>2023-05-17T16:28:25.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="夏至"><a href="#夏至" class="headerlink" title="夏至"></a>夏至</h1><blockquote><p>一生的时间很短<br> 短到不过是两颗心之间的距离</p></blockquote><div class="tip "><p>default</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;夏至&quot;&gt;&lt;a href=&quot;#夏至&quot; class=&quot;headerlink&quot; title=&quot;夏至&quot;&gt;&lt;/a&gt;夏至&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一生的时间很短&lt;br&gt; 短到不过是两颗心之间的距离&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;t</summary>
      
    
    
    
    
    <category term="生活" scheme="https://nack0c.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
